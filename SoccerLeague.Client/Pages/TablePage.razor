@page "/table"

@inherits BaseComponent

@inject LogService log
@inject ITeamRepository teamRepository
@inject ITeamMatchesRepository teamsMatchsRepository

<PageTitle>Soccer League - Table</PageTitle>

<h2>Table</h2>

<hr />

@if (IsLoading)
{
    <Loading />
}
else
{
    @if (Table!.Count == 0)
    {
        <p> There are no teams information </p>
    }
    else
    {
        <table class="table table-hover table-responsive">
            <thead>
                <tr>
                    <th class="text-center">Position</th>
                    <th class="">Team</th>
                    <th class="text-center">Played</th>
                    <th class="text-center">Won</th>
                    <th class="text-center">Drawn</th>
                    <th class="text-center">Lost</th>
                    <th class="text-center">GF</th>
                    <th class="text-center">GA</th>
                    <th class="text-center">GD</th>
                    <th class="text-center">Points</th>
                </tr>
            </thead>
            <tbody>
                @{
                    int i = 1;
                    foreach (var team in Table!)
                    {
                        <tr>
                            <td class="text-center">@(i++)</td>
                            <td class="">@team.Name</td>
                            <td class="text-center">@team.TotalPlayed</td>
                            <td class="text-center">@team.TotalWon</td>
                            <td class="text-center">@team.TotalDraw</td>
                            <td class="text-center">@team.TotalLost</td>
                            <td class="text-center">@team.TotalGF</td>
                            <td class="text-center">@team.TotalGA</td>
                            <td class="text-center">@team.TotalGD</td>
                            <td class="text-center fw-bold">@team.TotalPoints</td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }


}

@code {

    List<Team>? Teams { get; set; }
    List<TeamsMatch>? TeamsMatches { get; set; }
    List<dynamic>? Table { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        try
        {
            Teams = await teamRepository.getAllTeamsAsync();
            await LoadMatches(DateTime.MaxValue);
        }
        catch (Exception ex)
        {
            log.Exception(ex);
        }
        finally
        {
            IsLoading = false;
        }
    }

    async Task LoadMatches(DateTime datetime, bool useLoading = false)
    {
        if (!useLoading)
        {
            TeamsMatches = await teamsMatchsRepository.getTeamMatchByDate(datetime.ToString("yyyyMMdd"));
            ProcessTable();
        }
        else
        {
            IsLoading = true;

            _ = Task.Run(async () =>
            {
                try
                {
                    await LoadMatches(DateTime.MaxValue);
                }
                catch (Exception ex)
                {
                    log.Exception(ex);
                }
                finally
                {
                    IsLoading = false;
                }
            });

        }

    }

    void ProcessTable()
    {
        Table!.Clear();
        if ((Teams?.Count ?? 0) > 0 && (TeamsMatches?.Count ?? 0) > 0)
        {
            Teams?.ForEach(team =>
            {
                IEnumerable<TeamsMatch> matchesPlayed = TeamsMatches!.Where(x => x.IdTeam1 == team.Id || x.IdTeam2 == team.Id);

                int totalPlayed = matchesPlayed.Count();
                int totalWon = matchesPlayed.Count(x => (x.IdTeam1 == team.Id && x.ScoreTeam1 > x.ScoreTeam2) || 
                (x.IdTeam2 == team.Id && x.ScoreTeam1 < x.ScoreTeam2));
                int totalDraw = matchesPlayed.Count(x => x.ScoreTeam1 == x.ScoreTeam2);
                int totalLost = totalPlayed - totalWon - totalDraw;
                int totalGF = matchesPlayed.Select(x => x.IdTeam1 == team.Id ? x.ScoreTeam1 : x.ScoreTeam2).Sum();
                int totalGA = matchesPlayed.Select(x => x.IdTeam1 != team.Id ? x.ScoreTeam1 : x.ScoreTeam2).Sum();
                int totalGD = totalGF - totalGA;
                int totalPoints = totalWon * 3 + totalDraw;

                Table!.Add(new
                {
                    Name = team.Name,
                    TotalPlayed = totalPlayed,
                    TotalWon = totalWon,
                    TotalDraw = totalDraw,
                    TotalLost = totalLost,
                    TotalGF = totalGF,
                    TotalGA = totalGA,
                    TotalGD = totalGD,
                    TotalPoints = totalPoints
                });
            });

            Table = Table?.OrderByDescending(x => x.TotalPoints)
            .ThenByDescending(x => x.TotalGF)
            .ThenByDescending(x => x.TotalGD).ToList();
        }
    }

}