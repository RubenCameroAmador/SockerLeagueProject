@page "/matches"

@implements IDisposable

@inject LogService log
@inject ApplicationService app

<PageTitle>Soccer League - Matches</PageTitle>

<h2>Matches</h2>

<hr />

@if (IsLoading)
{
    <div class="card">
        <div class="card-body">
            <Loading />
        </div>
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <h3>Add new match</h3>
            <EditForm class="create-form" EditContext="editContext" OnValidSubmit="OnCreateTeamsMatchFormSubmit">
                <div class="form-group">
                    <label>Match date</label>
                    <InputDate class="form-control" @bind-Value="Model!.MatchDate" @bind-Value:format="dd/MM/yyyy" />
                </div>

                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            <label>Local</label>
                            <InputSelect class="form-control" @bind-Value="Model!.IdTeam1">
                                <option selected value="0">Select local team...</option>
                                @if (Teams != null)
                                {
                                    foreach (Team team in Teams)
                                    {
                                        <option value="@team.Id">@team.Name</option>
                                    }
                                }
                            </InputSelect>
                            <div>
                                <ValidationMessage For="() => Model!.IdTeam1" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Score</label>
                            <InputNumber class="form-control" name="team-name" @bind-Value="Model!.ScoreTeam1" TValue="int"
                                required />
                            <div>
                                <ValidationMessage For="() => Model!.ScoreTeam1" />
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            <label>Guest</label>
                            <InputSelect class="form-control" @bind-Value="Model!.IdTeam2">
                                <option selected value="0">Select guest team...</option>
                                @if (Teams != null)
                                {
                                    foreach (Team team in Teams)
                                    {
                                        <option value="@team.Id">@team.Name</option>
                                    }
                                }
                            </InputSelect>
                            <div>
                                <ValidationMessage For="() => Model!.IdTeam2" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label>Score</label>
                            <InputNumber class="form-control" name="team-name" @bind-Value="Model!.ScoreTeam2" TValue="int"
                                required />
                            <div>
                                <ValidationMessage For="() => Model!.ScoreTeam2" />
                            </div>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary mt-2">Add</button>
            </EditForm>
        </div>
    </div>

    <div class="card my-2">
        <div class="card-body">
            <h3>Results</h3>
            @if (TeamsMatches != null)
            {
                string datetime = string.Empty;
                System.Globalization.CultureInfo culture = new System.Globalization.CultureInfo("en-US");
                foreach (var groups in TeamsMatches.GroupBy(x => x.MatchDate.Date))
                {
                    datetime = groups.Key.ToString("dddd dd MMMM yyyy", culture);
                    datetime = char.ToUpper(datetime[0]) + datetime.Substring(1);
                    <h4>@datetime</h4>
                    @foreach (var teamsMatch in groups)
                    {

                        <div class="card mb-1">
                            <div class="card-body">
                                <div class="row scoreboard">
                                    <div class="col">
                                        <div class="row team">
                                            <div class="col teaminfo">
                                                <h6>Local</h6>
                                                <div class="fs-4 teamname">
                                                    @(Teams?.FirstOrDefault(x => x.Id == teamsMatch.IdTeam1)?.Name ?? "-")
                                                </div>
                                            </div>
                                            <div class="col fs-2 teamscore">@teamsMatch.ScoreTeam1</div>
                                        </div>
                                    </div>
                                    <div class="col-auto separator">-</div>
                                    <div class="col">
                                        <div class="row team">
                                            <div class="col fs-2 teamscore">@teamsMatch.ScoreTeam2</div>
                                            <div class="col teaminfo">
                                                <h6>Guest</h6>
                                                <div class="fs-4 teamname">
                                                    @(Teams?.FirstOrDefault(x => x.Id == teamsMatch.IdTeam2)?.Name ?? "-")
                                                </div>
                                            </div>

                                        </div>

                                    </div>
                                </div>
                            </div>

                        </div>

                    }

                    <hr />
                }
            }
        </div>
    </div>

}

@code {

    public bool IsLoading => app.IsLoading;

    public List<Team>? Teams => app.Teams.OrderBy(x => x.Name).ToList();
    public List<TeamsMatch>? TeamsMatches => app.TeamsMatches;

    EditContext? editContext;
    ValidationMessageStore? messageStore;
    TeamsMatchModel? Model;

    protected override void OnInitialized()
    {
        app.StateHasChanged += OnStateHasChanged;

        Model ??= new() { MatchDate = DateTime.Now.Date };
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

        app.LoadTeams();
        app.LoadTeamsMatches();
    }

    async void OnStateHasChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        // Custom validation logic
        if (Model?.IdTeam1 == 0)
        {
            messageStore?.Add(() => Model!.IdTeam1, "Select local team.");
        }
        if (Model?.IdTeam2 == 0)
        {
            messageStore?.Add(() => Model!.IdTeam2, "Select guest team.");
        }
        if (Model?.IdTeam1 != 0 && Model?.IdTeam2 != 0 && Model?.IdTeam1 == Model?.IdTeam2)
        {
            messageStore?.Add(() => Model!.IdTeam2, "Select a different guest team.");
        }
    }
    void OnCreateTeamsMatchFormSubmit()
    {
        if (IsLoading) return;

        if (editContext!.Validate())
        {
            app.AddTeamsMatch(Model!.GetTeamsMatch(), (result) =>
            {
                if (result == null) return;

                if (result.IsSuccess)
                {
                    Model!.IdTeam1 = 
                        Model!.IdTeam2 = 
                        Model!.ScoreTeam1 =
                        Model!.ScoreTeam2 = 0;
                    messageStore?.Clear();
                    editContext.MarkAsUnmodified();
                    log.Info(result.Message ?? "Teams match added");
                }
                else log.Exception(new Exception(result.Message));

                InvokeAsync(() => StateHasChanged());
            });
        }
    }

    void IDisposable.Dispose()
    {
        app.StateHasChanged -= OnStateHasChanged;
    }

}
