@page "/"
@inherits BaseComponent
@inject ITeamRepository repository
@inject LogService log

<PageTitle>Soccer League</PageTitle>


<h1>Welcome to Soccer league</h1>

<p class="caption-2">To start your own league add the first team</p>

@if (editContext != null)
{
    <div class="card">
        <div class="card-body">
            <EditForm class="create-form" EditContext="editContext" OnValidSubmit="OnCreateTeamFormSubmit">
                <div class="form-group">
                    <label>Team name</label>
                    <InputText class="form-control" name="team-name" @bind-Value="Model!.Name" required />
                    <div>
                        <ValidationMessage For="() => Model!.Name" />
                    </div>
                </div>

                <button type="submit" class="btn btn-primary mt-2">Add</button>
            </EditForm>
        </div>
    </div>
}

<div class="card mt-2">
    <div class="card-body">
        @if (IsLoading)
        {
            <Loading />
        }
        else
        {
            if (Teams!.Count == 0)
            {
                <p class="caption-3">There are no teams</p>
            }
            else
            {
                <table class="table table-response">
                    <thead>
                        <tr>
                            <th>Position</th>
                            <th>Team</th>
                            <th>Played</th>
                            <th>Won</th>
                            <th>Drawn</th>
                            <th>Lost</th>
                            <th>GF</th>
                            <th>GA</th>
                            <th>GD</th>
                            <th>Points</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int i = 1;
                            foreach (Team team in Teams)
                            {
                                <tr>
                                    <td>@(i++)</td>
                                    <td>@team.Name</td>
                                    <td>0</td>
                                    <td>0</td>
                                    <td>0</td>
                                    <td>0</td>
                                    <td>0</td>
                                    <td>0</td>
                                    <td>0</td>
                                    <td>0</td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            }

        }
    </div>
</div>

@code {
    EditContext? editContext;
    ValidationMessageStore? messageStore;
    Team? Model;
    List<Team> Teams { get; set; } = new();

    protected override void OnInitialized()
    {
        Model ??= new();
        editContext = new(Model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

        LoadTeams();
    }

    void LoadTeams()
    {
        IsLoading = true;
        Task.Run(async () =>
        {
            try
            {
                Teams = await repository.getAllTeamsAsync();
            }
            catch (Exception ex)
            {
                log.Exception(ex);
            }
            finally
            {
                IsLoading = false;
            }
        });
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        // Custom validation logic
        if (string.IsNullOrEmpty(Model?.Name))
        {
            messageStore?.Add(() => Model!.Name, "Entry the team name.");
        }
    }

    void OnCreateTeamFormSubmit()
    {
        if (editContext!.Validate())
        {
            IsLoading = true;
            Task.Run(async () =>
            {
                try
                {
                    await repository.addTeamAsync(Model!);
                }
                catch (Exception ex)
                {
                    log.Exception(ex);
                }
                finally
                {
                    await InvokeAsync(LoadTeams);
                }
            });
        }
    }
}